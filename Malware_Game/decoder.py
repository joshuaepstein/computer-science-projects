import random
import pygame
from AssetsLibrary import decoderPath

class Decoder:
    def __init__(self, x, y, screen, level):
        self.x = x
        self.y = y
        self.screen = screen
        self.health = 10
        self.size = 50
        self.level = level
        self.rotation = 0
        self.cooldown = 0
        
    def drawImage(self):
        image = self.health > 0 and pygame.image.load(decoderPath) or pygame.image.load("assets/decoder-dead.png")
        image = pygame.transform.scale(image, (self.size, self.size))
        image = pygame.transform.rotate(image, self.rotation)
        # opacity should be 255 - if there is a cooldown then it should increase opacity until the cooldown is over
        opacity = (self.cooldown > 0 and self.health > 0) and 255 - self.cooldown * 2 or 255
        image.set_alpha(opacity)
        self.screen.blit(image, (self.x, self.y))
        self.cooldown -= 0.5
        
    def draw(self):
        self.drawImage()
        
    def move(self, x, y):
        self.x += x
        self.y += y
        
    def remove(self):
        self.health = 0
        self.x = -100
        self.y = -100
        
    def getHealth(self):
        return self.health
    
    def getSize(self):
        return self.size
    
    def getLevel(self):
        return self.level
    
    def setLevel(self, level):
        self.level = level
        return self
    
    def getX(self):
        return self.x
    
    def getY(self):
        return self.y
    
    def setX(self, x):
        self.x = x
        return self
    
    def setY(self, y):
        self.y = y
        return self
    
    def getRect(self):
        return pygame.Rect(self.x, self.y, self.size, self.size)
    
    def getRotation(self):
        return self.rotation
    
    def getCenter(self):
        return (self.x + self.size / 2, self.y + self.size / 2)
    
    def getDistance(self, other):
        return ((self.getCenter()[0] - other.getCenter()[0]) ** 2 + (self.getCenter()[1] - other.getCenter()[1]) ** 2) ** 0.5
    
    def shoot(self, malwares): # malwares is a list of malware objects
        if self.health <= 0:
            return
        if self.cooldown > 0:
            return
        nearestMalware = None
        for malware in malwares:
            if nearestMalware == None:
                nearestMalware = malware
            elif self.getDistance(malware) < self.getDistance(nearestMalware):
                nearestMalware = malware
        if nearestMalware != None:
            if self.getDistance(nearestMalware) < 150:
                self.shootAt(malwares, nearestMalware)

    def shootAt(self, malwares, malware):
        if self.health <= 0:
            return
        if self.cooldown > 0:
            return
        pygame.draw.line(self.screen, (255, 50, 50), self.getCenter(), malware.getCenter(), 5)
        
        if self.cooldown <= 0:
            self.cooldown = 120
        malware.health -= 1
        self.health -= 1
        if malware.health <= 0:
            malware.remove()
            malwares.remove(malware)