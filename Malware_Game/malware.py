# object for malware

import random
import pygame
from Settings import Settings


class Malware:
    # The key is the rectangle which should be used for collision detection.
    # The value is the direction the decoder should now be moving after collision.
    pathBlockers = {
        "Right": [pygame.Rect(105, 503, 100, 50),pygame.Rect(204, 224, 155, 46)],
        "Left": [pygame.Rect(587, 366, 266, 53), pygame.Rect(739, 31, 200, 51)],
        "Up": [ pygame.Rect(808, 458, 45, 128), pygame.Rect(203, 378, 45, 101), pygame.Rect(892, 148, 43, 190), pygame.Rect(20, 36, 39, 120)],
    }
    
    # Store the x, y, and rectangle from pygame, also store the health: 1-10
    def __init__(self, x, y, screen, level):
        self.x = x
        self.y = y
        self.movingDirection = "Up"
        self.screen = screen
        self.rect = pygame.Rect(self.x, self.y, 20, 20)
        self.health = random.randint(1, 2) == 1 and random.randint(1, 2) or 1
        self.size = 20
        self.aliveTime = 0 
        self.level = level
        
    def draw(self):
        color = self.health > 1 and (255, 0, 0) or (0, 0, 0)
        scale = min(20, self.aliveTime * 0.1 + 20)
        self.rect.width = scale
        self.rect.height = scale
        self.rect.x = self.x - scale / 2
        self.rect.y = self.y - scale / 2
        shape = pygame.draw.rect(self.screen, color, self.rect)
        self.aliveTime += 1

    def move(self):
        for pathBlocker in self.pathBlockers:
            for rect in self.pathBlockers[pathBlocker]:
                if self.rect.colliderect(rect):
                    self.movingDirection = pathBlocker
                    break
                
                
        if self.movingDirection == "Up":
            self.y -= Settings["speed"](self.level)
        elif self.movingDirection == "Down":
            self.y += Settings["speed"](self.level)
        elif self.movingDirection == "Left":
            self.x -= Settings["speed"](self.level)
        elif self.movingDirection == "Right":
            self.x += Settings["speed"](self.level)
        else:
            print("Error: Malware moving direction is not valid")
        
    def remove(self):
        self.health = 0
        self.x = -100
        self.y = -100
        self.rect.x = self.x
        self.rect.y = self.y
        Settings["points"] += 1
        
    def getRect(self):
        return self.rect
    
    def getCenter(self):
        return (self.x + self.size / 2, self.y + self.size / 2)