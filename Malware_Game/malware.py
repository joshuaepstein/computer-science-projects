# object for malware

import random
import pygame
from Settings import Settings


class Malware:
    # Store the x, y, and rectangle from pygame, also store the health: 1-10
    def __init__(self, x, y, screen):
        self.x = x
        self.y = y
        self.screen = screen
        self.rect = pygame.Rect(self.x, self.y, 20, 20)
        self.health = random.randint(1, 2) == 1 and random.randint(1, 2) or 1
        self.size = 20
        self.aliveTime = 0 
        
    def draw(self):
        color = self.health > 1 and (255, 0, 0) or (0, 0, 0)
        scale = min(20, self.aliveTime * 0.1 + 20)
        self.rect.width = scale
        self.rect.height = scale
        self.rect.x = self.x - scale / 2
        self.rect.y = self.y - scale / 2
        shape = pygame.draw.rect(self.screen, color, self.rect)
        self.aliveTime += 1

    def move(self):
        # we want it to follow a path, it should start at 151, 675 - then go up to 151, 545. Once at this point it should go to 777, 545, then up to 777, 415, then to 256, 415, then to 253, 415, then to 253, 270, then finally 854, 260.
        if self.x == 151 and self.y > 545:
            self.y -= Settings["speed"] 
        elif self.x < 777 and self.y == 545:
            self.x += Settings["speed"] 
        elif self.x == 777 and self.y > 415:
            self.y -= Settings["speed"] 
        elif self.x > 256 and self.y == 415:
            self.x -= Settings["speed"] 
        elif self.x == 256 and self.y > 270:
            self.y -= Settings["speed"] 
        elif self.x == 253 and self.y > 260:
            self.y -= Settings["speed"] 
        elif self.x < 854 and self.y == 260:
            self.x += Settings["speed"] 
        elif self.x == 854 and self.y > 80:
            self.y -= Settings["speed"] 
        # then reduce the x between 854 and 50 - and then just reduce the y
        elif self.x > 50 and self.y == 80:
            self.x -= Settings["speed"] 
        else:
            self.y -= Settings["speed"]        
            
        self.rect.x = self.x
        self.rect.y = self.y
        
    def remove(self):
        self.health = 0
        self.x = -100
        self.y = -100
        self.rect.x = self.x
        self.rect.y = self.y
        
    def getRect(self):
        return self.rect
    
    def getCenter(self):
        return (self.x + self.size / 2, self.y + self.size / 2)